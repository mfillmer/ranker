{"version":3,"sources":["logo.svg","ListEntryView.js","redux/entries.js","ControlPanel.js","ListView.js","redux/store.js","CreateListEntryView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListEntryView","id","selected","onSelect","f","onUnSelect","image","ranking","title","onClick","className","src","onError","e","entry","state","type","payload","ratings","rating","connect","dispatch","rateItem","r","rateEntry","setSelectedItem","selectedItem","onRate","Fragment","to","ownProps","entries","Object","values","useState","addToSelection","removeSelection","getArrayAverage","array","reduce","pv","cv","length","map","sort","a","b","item","index","key","localStorage","getItem","store","createStore","combineReducers","JSON","parse","subscribe","setItem","stringify","getState","addEntry","v4","createEntry","setTitle","alt","autoFocus","onChange","target","value","preventDefault","App","path","exact","component","ListView","CreateListEntryView","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3981385f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst ListEntryView = ({ id, selected = false, onSelect = f => f, onUnSelect = f => f,\n    image, ranking, title }) => {\n    return (\n        <div\n            onClick={() => selected ? onUnSelect(id) : onSelect(id)}\n            className={`list-entry ${selected ? 'selected' : ''}`}>\n            <div className='image-container' >\n                <img src={image} onError={e => null} />\n            </div >\n            <div className=\"title\">{title}</div>\n            <div className=\"ranking\">{ranking}</div>\n        </div >\n    )\n}\n\nexport default ListEntryView\n","import { v4 } from \"uuid\"\n\n\nconst ENTRY_CREATED = 'ENTRY_CREATED'\nexport const createEntry = (title, image) => ({\n    type: ENTRY_CREATED,\n    id: v4(), title, image, ratings: []\n})\n\nconst ENTRY_RATED = 'ENTRY_RATED'\nexport const rateEntry = (id, rating) => ({\n    type: ENTRY_RATED, id, rating\n})\n\n\n\nexport const entries = (state = {}, { type, ...payload }) => {\n    switch (type) {\n        case ENTRY_CREATED:\n            return {\n                ...state,\n                [payload.id]: payload\n            }\n        case ENTRY_RATED:\n            return {\n                ...state,\n                [payload.id]: entry(state[payload.id], { type, ...payload })\n            }\n\n        default:\n            return state\n    }\n}\n\n\nexport const entry = (state = {}, { type, ...payload }) => {\n    switch (type) {\n        case ENTRY_RATED:\n            return {\n                ...state,\n                ratings: [...state.ratings, payload.rating]\n            }\n\n        default:\n            return state;\n    }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { rateEntry } from './redux/entries'\n\nconst ControlPanel = ({ setSelectedItem = f => f, selectedItem, rateItem = f => f }) => {\n\n    const onRate = (id, r) => () => {\n        setSelectedItem()\n        rateItem(id, r)\n    }\n\n    return (\n        <div className='control-panel'>\n            <h2>\n                {selectedItem ?\n                    <React.Fragment>\n                        <div onClick={onRate(selectedItem, -1)}>-1</div>\n                        <div onClick={onRate(selectedItem, 0)}>0</div>\n                        <div onClick={onRate(selectedItem, 1)}>+1</div>\n                    </React.Fragment>\n                    :\n                    <Link to='/create'>+</Link>\n                }\n            </h2>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    rateItem: (id, r) => dispatch(rateEntry(id, r))\n})\n\nexport default connect(null, mapDispatchToProps)(ControlPanel)\n","import React, { useState } from 'react'\nimport ListEntryView from './ListEntryView'\nimport ControlPanel from './ControlPanel'\nimport { connect } from 'react-redux'\n\nconst ListView = ({ entries = [] }) => {\n    const [selectedItem, setSelectedItem] = useState()\n    const addToSelection = id => setSelectedItem(id)\n    const removeSelection = id => setSelectedItem(-1)\n\n    const getArrayAverage = (array = []) => array.reduce((pv, cv) => pv + cv, 0) / array.length || 0\n\n    const calculateRanking = entry => ({ ...entry, ranking: getArrayAverage(entry.ratings) })\n\n    return (\n        <div className='list-view'>\n            <h1>Dein Ranking</h1>\n            {entries\n                .map(calculateRanking)\n                .sort((a, b) => b.ranking - a.ranking)\n                .map((item, index) => (\n                    <ListEntryView\n                        {...item} key={index}\n                        onSelect={addToSelection}\n                        onUnSelect={removeSelection}\n                        selected={item.id === selectedItem} />\n                ))}\n            <ControlPanel setSelectedItem={setSelectedItem} selectedItem={selectedItem} />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    entries: Object.values(state.entries),\n    ...ownProps\n})\n\nexport default connect(mapStateToProps)(ListView)\n","import { createStore, combineReducers } from \"redux\";\nimport { entries } from './entries'\n\nconst state = localStorage.getItem('state')\n\nconst store = createStore(combineReducers({ entries }),\n    state ? JSON.parse(state) : {}\n)\n\nstore.subscribe(() => {\n    localStorage.setItem('state', JSON.stringify(store.getState()))\n})\n\nexport default store;","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { createEntry } from './redux/entries'\n\nconst CreateListEntryView = ({ addEntry = f => f }) => {\n    const [title, setTitle] = useState('')\n    const [image, setimage] = useState('')\n    const submit = e => {\n        e.preventDefault();\n        addEntry(title, image)\n    }\n    return (\n        <div className='entry-form'>\n            <h1>Eintrag erstellen</h1>\n            <div className=\"image-container\">\n                <img src={image} alt='Wähle ein Bild aus' onError={() => null} />\n            </div>\n            <h2 className='entry-title'>\n                <input autoFocus type=\"text\" onChange={e => setTitle(e.target.value)} />\n            </h2>\n            <button onClick={submit}>Hinzufügen</button>\n            <Link to='/'>Abbrechen</Link>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    addEntry: (title, image) => dispatch(createEntry(title, image))\n})\nexport default connect(null, mapDispatchToProps)(CreateListEntryView)\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport ListView from './ListView';\nimport store from './redux/store';\nimport CreateListEntryView from './CreateListEntryView';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Route path='/ranker/' exact={true} component={ListView} />\n        <Route path='/ranker/create' component={CreateListEntryView} />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}